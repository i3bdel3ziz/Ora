(function(){
  'use strict';
  var STORAGE_KEY = 'timesheet-no-babel-1.8';
  var WEEKDAYS = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
  var dailyTarget = 8; // fixed
  var longDay = 0; // Sun column by default

  function daysInMonth(year, monthIndex0){ return new Date(year, monthIndex0+1, 0).getDate(); }
  function fmt(n){ return (Math.round(n*100)/100).toFixed(2); }
  function isWeekend(wd){ return wd===5 || wd===6; }

  function loadStore(){ try{ var raw=localStorage.getItem(STORAGE_KEY); return raw? JSON.parse(raw) : {}; }catch(e){ return {}; } }
  function saveStore(store){ try{ localStorage.setItem(STORAGE_KEY, JSON.stringify(store)); }catch(e){} }

  var today = new Date();
  var year = today.getFullYear();
  var month = today.getMonth();
  var store = loadStore();

  function ymKey(y,m){ return y+'-'+String(m+1).padStart(2,'0'); }
  function getMonthState(y,m){
    var k = ymKey(y,m); var st = store[k] || (store[k]={hoursByDay:{}, holidays:{}}); return st;
  }

  var titleInput = document.getElementById('appTitle');
  var logoImg = document.getElementById('wl_logo');
  try{
    var t = localStorage.getItem('wl_title'); if(t) titleInput.value = t;
    var logo = localStorage.getItem('wl_logo'); if(logo){ logoImg.src = logo; logoImg.classList.remove('hidden'); }
  }catch(e){}

  titleInput.addEventListener('input', function(){ try{ localStorage.setItem('wl_title', titleInput.value); }catch(e){} });

  document.getElementById('logoUrl').addEventListener('change', function(e){
    var url = e.target.value;
    if(url){ logoImg.src = url; logoImg.classList.remove('hidden'); try{ localStorage.setItem('wl_logo', url); }catch(err){} }
  });

  function updateJump(){
    var sel = document.getElementById('jump');
    sel.innerHTML = '';
    for(var k=-24; k<12; k++){
      var dt = new Date(today.getFullYear(), today.getMonth()+k, 1);
      var val = dt.getFullYear() + '-' + String(dt.getMonth()+1).padStart(2,'0');
      var opt = document.createElement('option');
      opt.value = val;
      opt.textContent = dt.toLocaleDateString(undefined,{month:'long',year:'numeric'});
      if(dt.getFullYear()===year && dt.getMonth()===month) opt.selected=true;
      sel.appendChild(opt);
    }
    sel.onchange = function(){
      var parts = sel.value.split('-'); year = Number(parts[0]); month = Number(parts[1])-1; render();
    };
  }

  function buildRows(y,m){
    var total = daysInMonth(y,m);
    var grid = []; var cur = [null,null,null,null,null,null,null];
    for(var d=1; d<=total; d++){
      var wd = new Date(y,m,d).getDay();
      if(isWeekend(wd)) continue;
      if(wd===0 && cur.some(function(c){return c!==null;})){ grid.push(cur); cur=[null,null,null,null,null,null,null]; }
      cur[wd] = d;
      var nextDate = new Date(y,m,d+1);
      var endOfRow = nextDate.getDay()===0 || d===total;
      if(endOfRow){ grid.push(cur); cur=[null,null,null,null,null,null,null]; }
    }
    if(cur.some(function(c){return c!==null;})) grid.push(cur);
    return grid.map(function(row){ return [row[0],row[1],row[2],row[3],row[4]]; });
  }

  function render(){
    var st = getMonthState(year, month);
    var hoursByDay = st.hoursByDay || (st.hoursByDay={});
    var holidays = st.holidays || (st.holidays={});

    document.getElementById('monthLabel').textContent =
      new Date(year,month,1).toLocaleDateString(undefined,{month:'long',year:'numeric'});

    updateJump();

    var rows = buildRows(year, month);
    var workingDays = rows.reduce(function(acc,row){ return acc + row.filter(Boolean).length; }, 0);
    var targetMonthlyHours = workingDays * dailyTarget;
    var actualMonthlyHours = Object.keys(hoursByDay).reduce(function(s,k){ return s + (Number(hoursByDay[k])||0); }, 0);
    var diff = actualMonthlyHours - targetMonthlyHours;
    var pct = targetMonthlyHours>0 ? (actualMonthlyHours/targetMonthlyHours)*100 : 0;

    var enteredDays = 0;
    rows.forEach(function(r){ r.forEach(function(d){ if(d) enteredDays++; }); });
    var avgPerEntered = enteredDays ? (actualMonthlyHours/enteredDays) : 0;
    var remainingWorking = workingDays - enteredDays;
    var forecastTotal = actualMonthlyHours + avgPerEntered * remainingWorking;
    var forecastDiff = forecastTotal - targetMonthlyHours;

    document.getElementById('targetHours').textContent = fmt(targetMonthlyHours);
    document.getElementById('actualHours').textContent = fmt(actualMonthlyHours);
    document.getElementById('completion').textContent = 'Completion: ' + fmt(pct) + '%';
    document.getElementById('diffLabel').textContent = diff>=0 ? 'Exceed by' : 'Shortage of';
    document.getElementById('diffValue').textContent = fmt(Math.abs(diff)) + ' h';
    document.getElementById('forecast').textContent = 'Forecast: ' + fmt(forecastTotal) + ' h (' + (forecastDiff>=0?'exceed':'shortage') + ' ' + fmt(Math.abs(forecastDiff)) + ' h)';

    document.getElementById('barTarget').textContent = fmt(targetMonthlyHours);
    document.getElementById('barActual').textContent = fmt(actualMonthlyHours);
    document.getElementById('barDiffType').textContent = diff>=0 ? 'Exceed' : 'Shortage';
    document.getElementById('barDiffVal').textContent = fmt(Math.abs(diff));

    var weeksEl = document.getElementById('weeks');
    weeksEl.innerHTML = '';

    rows.forEach(function(row, ri){
      var weekDaysCount = row.filter(Boolean).length || 1;
      var weekSum = row.reduce(function(s, d){ return s + (d ? (Number(hoursByDay[d])||0) : 0); }, 0);
      var weekAvg = weekSum / weekDaysCount;

      var card = document.createElement('div');
      card.className = 'border rounded-xl p-2';
      card.innerHTML =
        '<div class="flex items-center justify-between mb-2">'+
          '<div class="text-sm">Week ' + (ri+1) + ' — Subtotal <b>'+fmt(weekSum)+'</b>h · Avg <b>'+fmt(weekAvg)+'</b>h/day</div>'+
        '</div>'+
        '<div class="grid gap-2" style="grid-template-columns: repeat('+row.length+', minmax(0,1fr))"></div>';
      var grid = card.lastElementChild;

      row.forEach(function(dayNum, j){
        var isToday = (new Date().getFullYear()===year && new Date().getMonth()===month && new Date().getDate()===dayNum);
        var isLongCol = (j === longDay);
        var holiday = !!holidays[dayNum];

        var cell = document.createElement('div');
        cell.className = 'rounded-xl border p-2 ' + (isLongCol ? 'bg-indigo-50 ' : '') + (isToday ? 'cell-today' : '');

        if(dayNum){
          var header = document.createElement('div');
          header.className = 'flex items-center justify-between mb-2';
          var left = document.createElement('span');
          left.className = 'text-xs text-gray-500';
          left.textContent = WEEKDAYS[j] + ' ' + dayNum;
          var right = document.createElement('div');
          right.className = 'flex items-center gap-1';
          if(isLongCol){
            var tag = document.createElement('span');
            tag.title='Long day';
            tag.className='text-[10px] px-1.5 py-0.5 rounded bg-indigo-100 text-indigo-700';
            tag.textContent='9.5h';
            right.appendChild(tag);
          }
          var hBtn = document.createElement('button');
          hBtn.title='Toggle holiday';
          hBtn.className='text-[10px] px-1.5 py-0.5 rounded ' + (holiday?'bg-amber-200 text-amber-900':'bg-gray-100');
          hBtn.textContent='H';
          hBtn.onclick = function(){
            if(holidays[dayNum]) delete holidays[dayNum]; else holidays[dayNum]=true;
            saveStore(store); render();
          };
          right.appendChild(hBtn);
          header.appendChild(left); header.appendChild(right);
          cell.appendChild(header);

          var input = document.createElement('input');
          input.type='number'; input.step='0.25'; input.min='0';
          input.className='w-full rounded-lg border px-2 py-1';
          input.value = (hoursByDay[dayNum]===undefined || hoursByDay[dayNum]===null)? '' : hoursByDay[dayNum];
          input.oninput = function(){
            var v = input.value === '' ? NaN : Number(input.value);
            if (isNaN(v)) delete hoursByDay[dayNum]; else hoursByDay[dayNum] = v;
            saveStore(store); render();
          };
          cell.appendChild(input);
        }else{
          var spacer = document.createElement('div');
          spacer.className = 'h-7 sm:h-10';
          cell.appendChild(spacer);
        }

        grid.appendChild(cell);
      });

      weeksEl.appendChild(card);
    });

    // Wire top bar buttons (each re-render rebinds to ensure state is current)
    document.getElementById('fillAll').onclick = function(){
      var st = getMonthState(year, month);
      var hours = st.hoursByDay;
      rows.forEach(function(row, ri){
        row.forEach(function(d, j){
          if(!d) return;
          var base = (j===longDay)? 9.5 : dailyTarget;
          hours[d] = st.holidays[d] ? dailyTarget : base;
        });
      });
      saveStore(store); render();
    };
    document.getElementById('clearAll').onclick = function(){
      var st = getMonthState(year, month);
      st.hoursByDay = {}; saveStore(store); render();
    };

    document.getElementById('exportCSV').onclick = function(){
      var lines = ["day,weekday,hours,holiday"];
      var total = daysInMonth(year,month);
      for(var d=1; d<=total; d++){
        var wd = new Date(year, month, d).getDay();
        if(isWeekend(wd)) continue;
        var wk = WEEKDAYS[wd];
        var v = getMonthState(year,month).hoursByDay[d]; v = (v===undefined || v===null)? '' : v;
        var hol = getMonthState(year,month).holidays[d] ? 'yes' : '';
        lines.push(d + "," + wk + "," + v + "," + hol);
      }
      var blob = new Blob([lines.join(String.fromCharCode(10))], { type:'text/csv;charset=utf-8;' });
      var url = URL.createObjectURL(blob);
      var a = document.createElement('a'); a.href = url; a.download = "timesheet_" + ymKey(year,month) + ".csv";
      document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    };

    document.getElementById('backupJSON').onclick = function(){
      var payload = { store: store, exportedAt: new Date().toISOString(), version: '1.8-no-babel' };
      var blob = new Blob([JSON.stringify(payload,null,2)], { type:'application/json;charset=utf-8;' });
      var url = URL.createObjectURL(blob);
      var a = document.createElement('a'); a.href = url; a.download = "timesheet_backup_" + ymKey(year,month) + ".json";
      document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    };

    document.getElementById('restoreFile').addEventListener('change', function(e){
      var f = e.target.files && e.target.files[0];
      if(!f) return;
      var reader = new FileReader();
      reader.onload = function(){
        try{
          var obj = JSON.parse(reader.result);
          if(obj && obj.store){ store = obj.store; saveStore(store); location.reload(); }
        }catch(err){ alert('Invalid JSON'); }
      };
      reader.readAsText(f); e.target.value='';
    });

    document.getElementById('exportPDF').onclick = function(){
      var w = window.open('', '_blank', 'noopener,noreferrer,width=900,height=700'); if(!w) return;
      var style = 'body{font-family:sans-serif;margin:24px;color:#111}table{border-collapse:collapse;width:100%}th,td{border:1px solid #ddd;padding:6px;font-size:12px;text-align:right}th:first-child,td:first-child{text-align:left}';
      var monthName = new Date(year,month,1).toLocaleDateString(undefined,{month:'long', year:'numeric'});
      var rowsHtml = '';
      var total = daysInMonth(year,month);
      for(var d=1; d<=total; d++){
        var wd = new Date(year,month,d).getDay(); if(isWeekend(wd)) continue;
        var wk = WEEKDAYS[wd]; var v = getMonthState(year,month).hoursByDay[d]; v = (v===undefined || v===null)? '' : v;
        rowsHtml += '<tr><td>'+wk+' '+d+'</td><td>'+(v!==''?Number(v).toFixed(2):'')+'</td><td>'+(getMonthState(year,month).holidays[d]?'Holiday':'')+'</td></tr>';
      }
      var workingDays = buildRows(year,month).reduce(function(acc,row){return acc + row.filter(Boolean).length;},0);
      var targetMonthlyHours = workingDays * dailyTarget;
      var actualMonthlyHours = Object.keys(getMonthState(year,month).hoursByDay).reduce(function(s,k){return s + (Number(getMonthState(year,month).hoursByDay[k])||0);},0);
      var diff = actualMonthlyHours - targetMonthlyHours;
      var summary = '<table><thead><tr><th>Metric</th><th>Value (h)</th></tr></thead><tbody>'
        + '<tr><td>Daily target</td><td>'+ dailyTarget.toFixed(2) +'</td></tr>'
        + '<tr><td>Target hours</td><td>'+ targetMonthlyHours.toFixed(2) +'</td></tr>'
        + '<tr><td>Actual hours</td><td>'+ actualMonthlyHours.toFixed(2) +'</td></tr>'
        + '<tr><td>'+(diff>=0?'Exceed':'Shortage')+'</td><td>'+ Math.abs(diff).toFixed(2) +'</td></tr>'
        + '</tbody></table>';
      var printScript = '<scr'+'ipt>window.onload=()=>window.print()<\\/scr'+'ipt>';
      var html = '<!doctype html><html><head><meta charset="utf-8"><title>TimeSheet Report</title><style>'+style+'</style></head>'
        + '<body><h1>TimeSheet — '+monthName+'</h1>'+summary
        + '<h2>Daily entries (Sun–Thu)</h2><table><thead><tr><th>Day</th><th>Hours</th><th>Note</th></tr></thead><tbody>'+rowsHtml+'</tbody></table>'
        + printScript + '</body></html>';
      w.document.open(); w.document.write(html); w.document.close();
    };

    document.getElementById('prevYear').onclick = function(){ year--; render(); };
    document.getElementById('nextYear').onclick = function(){ year++; render(); };
    document.getElementById('prevMonth').onclick = function(){ month--; if(month<0){month=11;year--;} render(); };
    document.getElementById('nextMonth').onclick = function(){ month++; if(month>11){month=0;year++;} render(); };
    document.getElementById('resetToday').onclick = function(){ var n=new Date(); year=n.getFullYear(); month=n.getMonth(); render(); };

    render();
  })();